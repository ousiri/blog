(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{194:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"nginx常见配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx常见配置","aria-hidden":"true"}},[e._v("#")]),e._v(" Nginx常见配置")]),e._v(" "),a("h2",{attrs:{id:"性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能","aria-hidden":"true"}},[e._v("#")]),e._v(" 性能")]),e._v(" "),a("h3",{attrs:{id:"配置头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置头","aria-hidden":"true"}},[e._v("#")]),e._v(" 配置头")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# default: 1; worker的数量\nworker_proceses auto;\n# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes\nworker_rlimit_nofile 30000;\n")])])]),a("h3",{attrs:{id:"连接数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接数","aria-hidden":"true"}},[e._v("#")]),e._v(" 连接数")]),e._v(" "),a("p",[e._v("The worker_connections command tells our worker processes how many people can simultaneously be served by Nginx. The default value is 768;")]),e._v(" "),a("p",[e._v("可以通过查看 "),a("code",[e._v("ulimit -n")]),e._v(" 决定")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("events {\n  worker_connections  20000;\n}\n")])])]),a("h3",{attrs:{id:"tcp设置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp设置","aria-hidden":"true"}},[e._v("#")]),e._v(" tcp设置")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  # default: off; sendfile 配置可以提高 Nginx 静态资源托管效率。sendfile 是一个系统调用，直接在内核空间完成文件发送，不需要先 read 再 write，没有上下文切换开销。参考1\n  sendfile on;\n  # default: off; TCP_NOPUSH 是 FreeBSD 的一个 socket 选项，对应 Linux 的 TCP_CORK，Nginx 里统一用 tcp_nopush 来控制它，并且只有在启用了 sendfile 之后才生效。启用它之后，数据包会累计到一定大小之后才会发送，减小了额外开销，提高网络效率。参考1\n  tcp_nopush on;\n  # default: off; TCP_NODELAY 也是一个 socket 选项，启用后会禁用 Nagle 算法，尽快发送数据，某些情况下可以节约 200ms（Nagle 算法原理是：在发出去的数据还未被确认之前，新生成的小数据先存起来，凑满一个 MSS 或者等到收到确认后再发送）。Nginx 只会针对处于 keep-alive 状态的 TCP 连接才会启用 tcp_nodelay。参考1\n  # https://www.zhihu.com/question/42308970\n  # https://en.wikipedia.org/wiki/Nagle%27s_algorithm\n  tcp_nodelay on;\n  # 可以看到 TCP_NOPUSH 是要等数据包累积到一定大小才发送，TCP_NODELAY 是要尽快发送，二者相互矛盾。实际上，它们确实可以一起用，最终的效果是先填满包，再尽快发送。\n}\n")])])]),a("h3",{attrs:{id:"buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer","aria-hidden":"true"}},[e._v("#")]),e._v(" buffer")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  # This handles the client buffer size, meaning any POST actions sent to Nginx\n  client_body_buffer_size 10K;\n  # Similar to the previous directive, only instead it handles the client header size. For all intents and purposes, 1K is usually a decent size for this directive.\n  client_header_buffer_size 1k;\n  # The maximum allowed size for a client request. If the maximum size is exceeded, then Nginx will spit out a 413 error or Request Entity Too Large.\n  client_max_body_size 8m;\n  # The maximum number and size of buffers for large client headers.\n  large_client_header_buffers 2 1k;\n}\n")])])]),a("h3",{attrs:{id:"timeout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timeout","aria-hidden":"true"}},[e._v("#")]),e._v(" timeout")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  # the time a server will wait for a client body or client header to be sent after request. If neither a body or header is sent, the server will issue a 408 error or Request time out.\n  client_body_timeout 12;\n  client_header_timeout 12;\n  # the timeout for keep-alive connections with the client. Simply put, Nginx will close connections with the client after this period of time. Nginx 的默认值是 75 秒，有些浏览器最多只保持 60 秒\n  keepalive_timeout 60;\n  # Is established not on the entire transfer of answer, but only between two operations of reading; if after this time client will take nothing, then Nginx is shutting down the connection.\n  send_timeout 10;\n  # default off; 连接超时后将通过向客户端发送RST包来直接重置连接。不使用4次挥手。可能会出现问题\n  # 可能出现RST的情况：https://blog.csdn.net/hzw05103020/article/details/50806759\n  # RST攻击：https://russelltao.iteye.com/blog/1405349\n  reset_timeout_connection on;\n}\n")])])]),a("h3",{attrs:{id:"mime-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mime-types","aria-hidden":"true"}},[e._v("#")]),e._v(" MIME types")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  # 定义文件扩展名到MIME type的映射，多个扩展名可以对应一个MIME type\n  include /etc/nginx/mime.types;\n  # 默认MIME type\n\tdefault_type text/plain;\n  # 为了快速寻找到相应MIME type，Nginx使用散列表来存储MIME type与文件扩展名。types_hash_bucket_size 设置了每个散列桶占用的内存大小。\n  types_hash_bucket_size 128;\n  # types_hash_max_size影响散列表的冲突率。types_hash_max_size越大，就会消耗更多的内存，但散列key的冲突率会降低，检索速度就更快。types_hash_max_size越小，消耗的内存就越小，但散列key的冲突率可能上升。\n  types_hash_max_size 2048;\n}\n")])])]),a("h3",{attrs:{id:"gzip"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gzip","aria-hidden":"true"}},[e._v("#")]),e._v(" gzip")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('server {\n  gzip             on;\n  gzip_vary        on; # https://imququ.com/post/vary-header-in-http.html\n  gzip_comp_level  2;\n  gzip_min_length  1000;\n  gzip_proxied     any;\n  gzip_types       text/plain application/javascript text/xml text/css application/xml;\n  gzip_disabled    "msie6";\n}\n')])])]),a("h3",{attrs:{id:"引入其它文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引入其它文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 引入其它文件")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# /etc/nginx/nginx.conf\nserver {\n  include /etc/nginx/sites-enabled/*;\n}\n")])])]),a("h3",{attrs:{id:"cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache","aria-hidden":"true"}},[e._v("#")]),e._v(" cache")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {\n    expires 365d;\n    expires max;\n    etag on;\n  }\n}\n")])])]),a("h3",{attrs:{id:"proxy-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proxy-cache","aria-hidden":"true"}},[e._v("#")]),e._v(" proxy_cache")]),e._v(" "),a("p",[e._v("摘自参考1.")]),e._v(" "),a("blockquote",[a("p",[e._v("首先，在配置最外层定义一个缓存目录，并指定名称（keys_zone）和其他属性，这样在配置 proxy_pass 时，就可以使用这个缓存了。这里我对状态值等于 200 和 304 的响应缓存了 2 小时。")])]),e._v(" "),a("blockquote",[a("p",[e._v("默认情况下，如果响应头里有 Set-Cookie 字段，Nginx 并不会缓存这次响应，因为它认为这次响应的内容是因人而异的。我的博客中，这个 Set-Cookie 对于用户来说没有用，也不会影响输出内容，所以我通过配置 proxy_ignore_header 移除了它。")])]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("proxy_cache_path  /home/site/cache/nginx/proxy_cache_path levels=1:2 keys_zone=pnc:300m inactive=7d max_size=10g;\nproxy_temp_path   /home/site/cache/nginx/proxy_temp_path;\nproxy_cache_key   $host$uri$is_args$args;\n\nserver {\n    location / {\n        resolver                  127.0.0.1;  \n        proxy_cache               pnc;\n        proxy_cache_valid         200 304 2h;\n        proxy_cache_lock          on;\n        proxy_cache_lock_timeout  5s;\n        proxy_cache_use_stale     updating error timeout invalid_header http_500 http_502;\n        proxy_http_version        1.1;\n        proxy_ignore_headers      Set-Cookie;\n    }\n}\n")])])]),a("h3",{attrs:{id:"tcp-fast-open"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-fast-open","aria-hidden":"true"}},[e._v("#")]),e._v(" TCP Fast Open")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.keycdn.com/support/tcp-fast-open",target:"_blank",rel:"noopener noreferrer"}},[e._v("TCP Fast Open"),a("OutboundLink")],1),e._v(" "),a("img",{attrs:{src:"https://st.imququ.com/i/webp/static/uploads/2015/05/tcp-fastopen.png.webp",alt:""}})]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  listen 443 ssl http2 fastopen=3; \n  # 3 代表最多只能有 3 个未经三次握手的 TCP 链接在排队。超过这个限制，服务端会退化到采用普通的 TCP 握手流程\n  # 这是为了减少资源耗尽攻击：TFO 可以在第一次 SYN 的时候发送 HTTP 请求，而服务端会校验 Fast Open Cookie（FOC），如果通过就开始处理请求。如果不加限制，恶意客户端可以利用合法的 FOC 发送大量请求耗光服务端资源\n}\n")])])]),a("h3",{attrs:{id:"reuseport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reuseport","aria-hidden":"true"}},[e._v("#")]),e._v(" reuseport")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://nginx.com/blog/socket-sharding-nginx-release-1-9-1/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Socket Sharding in NGINX Release 1.9.1"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("img",{attrs:{src:"https://st.imququ.com/i/webp/static/uploads/2015/05/socket-sharding.png.webp",alt:""}})]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.wp.nginx.com/wp-content/uploads/2015/05/reuseport-benchmark.png",alt:""}})]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  listen 443 ssl http2 fastopen=3 reuseport;\n}\n")])])]),a("h3",{attrs:{id:"https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https","aria-hidden":"true"}},[e._v("#")]),e._v(" HTTPS")]),e._v(" "),a("h4",{attrs:{id:"let-s-encrypted"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-s-encrypted","aria-hidden":"true"}},[e._v("#")]),e._v(" Let's Encrypted")]),e._v(" "),a("ol",[a("li",[e._v("install")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://dl.eff.org/certbot-auto\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" certbot-auto /usr/local/bin/certbot-auto\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chown")]),e._v(" root /usr/local/bin/certbot-auto\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" 0755 /usr/local/bin/certbot-auto\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("配置nginx")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" /usr/local/bin/certbot-auto --nginx\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("自动更新证书")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' && /usr/local/bin/certbot-auto renew\"")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" -a /etc/crontab "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /dev/null\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("在SSL Lab测试")])]),e._v(" "),a("p",[e._v("https://www.ssllabs.com/ssltest/index.html")]),e._v(" "),a("h4",{attrs:{id:"优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化","aria-hidden":"true"}},[e._v("#")]),e._v(" 优化")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  # default none; \n  # builtin 是使用OpenSSL内置的cache，只适用于一个worker process, 可能会导致内存碎片\n  # shared 可以用于多个worker processes\n  ssl_session_cache shared:le_nginx_SSL:1m;\n  # default 5m;\n  ssl_session_timeout 1440m;\n  # default: ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n  ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n  # default: off; 倾向于使用服务端密钥\n  ssl_prefer_server_ciphers on;\n}\n")])])]),a("h4",{attrs:{id:"ocsp-stapling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ocsp-stapling","aria-hidden":"true"}},[e._v("#")]),e._v(" OCSP Stapling")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("从无法开启 OCSP Stapling 说起"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ocsp stapling in firefox"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  resolver 8.8.8.8 8.8.4.4;\n  ssl_stapling on;\n  ssl_stapling_verify on;\n  ssl_trusted_certificate /etc/nginx/ssl/star_forgott_com.crt;\n}\n")])])]),a("ol",[a("li",[a("a",{attrs:{href:"https://www.myssl.cn/tools/downloadchain.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("中间证书下载工具"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("网站证书命名为site.pem, 中间证书为intermediate.pem, 根证书root.pem")]),e._v(" "),a("li",[e._v("验证")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ openssl x509 -in site.pem -noout -subject\n$ openssl x509 -in intermediate.pem -noout -subject\n$ openssl x509 -in root.pem -noout -subject\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 获取OCSP地址")]),e._v("\n$ openssl x509 -in site.pem -noout -ocsp_uri\nhttp://ocsp.digicert-cn.com\n$ openssl ocsp -issuer intermediate.pem -cert site.pem -no_nonce -text -url http://ocsp.digicert-cn.com\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 把")]),e._v("\n$ openssl ocsp -CAfile chained.pem -issuer intermediate.pem -cert site.pem -no_nonce -text -url http://ocsp.digicert-cn.com -header "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"HOST"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ocsp.digicert-cn.com"')]),e._v("\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("验证证书有效")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ openssl s_client -connect campus.game.163.com:443 -status -tlsextdebug "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v(" /dev/null 2"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&")]),e._v("1\n")])])]),a("h3",{attrs:{id:"http2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2","aria-hidden":"true"}},[e._v("#")]),e._v(" http2")]),e._v(" "),a("ol",[a("li",[e._v("添加http2")])]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server{\n  listen [::]:443 ssl http2 ipv6only=on; # for ipv6\n  listen 443 ssl http2;\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("删除不安全的加密方式")])]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot<^> # 注释掉这行\n  # 添加下面这行\n  ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("添加HTTP Strict Transport Security(HSTS)")])]),e._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security",target:"_blank",rel:"noopener noreferrer"}},[e._v("Strict-Transport-Security"),a("OutboundLink")],1)]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('server{\n  add_header Strict-Transport-Security "max-age=15768000" always;\n  add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always; # 包括自域名\n}\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("redirect http")])]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  listen 80;\n  return 301 https://$host$request_uri;\n}\n")])])]),a("h2",{attrs:{id:"安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全","aria-hidden":"true"}},[e._v("#")]),e._v(" 安全")]),e._v(" "),a("h3",{attrs:{id:"隐藏不必要信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐藏不必要信息","aria-hidden":"true"}},[e._v("#")]),e._v(" 隐藏不必要信息")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server{\n  server_token: off;\n  proxy_hide_header: X-Powered-By;\n}\n")])])]),a("h3",{attrs:{id:"禁用非必要的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#禁用非必要的方法","aria-hidden":"true"}},[e._v("#")]),e._v(" 禁用非必要的方法")]),e._v(" "),a("p",[e._v("444 是 Nginx 定义的响应状态码，会立即断开连接，没有响应正文")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server {\n  if($request_method !~ ^(GET|HEAD|POST)){\n    return 444;\n  }\n}\n")])])]),a("h3",{attrs:{id:"合理配置响应头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合理配置响应头","aria-hidden":"true"}},[e._v("#")]),e._v(" 合理配置响应头")]),e._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("add_header  Strict-Transport-Security  \"max-age=31536000\";\nadd_header  X-Frame-Options  deny; # 用来指定此网页是否允许被 iframe 嵌套，deny 就是不允许任何嵌套发生\nadd_header  X-Content-Type-Options  nosniff; # 用来指定浏览器对未指定或错误指定 Content-Type 资源真正类型的猜测行为，nosniff 表示不允许任何猜测\nadd_header  Content-Security-Policy  \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://a.disquscdn.com; img-src 'self' data: https://www.google-analytics.com; style-src 'self' 'unsafe-inline'; frame-src https://disqus.com\"; # （简称为 CSP）用来指定页面可以加载哪些资源，主要目的是减少 XSS 的发生\n")])])]),a("h3",{attrs:{id:"参考："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考：","aria-hidden":"true"}},[e._v("#")]),e._v(" 参考：")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://imququ.com/post/my-nginx-conf-for-wpo.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("本博客 Nginx 配置之性能篇"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration#timeouts",target:"_blank",rel:"noopener noreferrer"}},[e._v("How To Optimize Nginx Configuration"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://gist.github.com/plentz/6737338",target:"_blank",rel:"noopener noreferrer"}},[e._v("Best nginx configuration for improved security"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://thoughts.t37.net/nginx-optimization-understanding-sendfile-tcp-nodelay-and-tcp-nopush-c55cdd276765",target:"_blank",rel:"noopener noreferrer"}},[e._v("Optimisations Nginx, bien comprendre sendfile, tcpnodelay et tcpnopush"),a("OutboundLink")],1)])])])},[],!1,null,null,null);t.default=n.exports}}]);